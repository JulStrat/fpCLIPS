unit CLIPSDLL;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date:  26/4/2019                                            }
{    Generated Time: 2:36:42 μμ                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> c:\old_disk\c_disk\test\fpclips\windows\integration\CLIPSDLL.H <=}

{$IFNDEF CLIPSWin32_H}
{$DEFINE CLIPSWin32_H}


procedure __declspec(__CreateEnvironment(var void: DLLIMPORT)) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__DestroyEnvironment(var void*: DLLIMPORT) __DESTROYENVIRONMENT(VOID) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvClear(var void*: DLLIMPORT) __ENVCLEAR(VOID) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvReset(var void*: DLLIMPORT) __ENVRESET(VOID) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvLoad(var void*: DLLIMPORT) __ENVLOAD(VOID; 
                    _2: PChar): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvRun(var void*: DLLIMPORT) __ENVRUN(VOID; 
                    long: LongInt): LongInt cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvBuild(var void*: DLLIMPORT) __ENVBUILD(VOID; 
                    _2: PChar): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvEval(var void*: DLLIMPORT) __ENVEVAL(VOID; 
                    _2: PChar; 
                    _3: Pointer): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvIncrementFactCount(var void*: DLLIMPORT) __ENVINCREMENTFACTCOUNT(VOID; 
                     _2: Pointer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvDecrementFactCount(var void*: DLLIMPORT) __ENVDECREMENTFACTCOUNT(VOID; 
                     _2: Pointer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvIncrementInstanceCount(var void*: DLLIMPORT) __ENVINCREMENTINSTANCECOUNT(VOID; 
                     _2: Pointer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

procedure __declspec(__EnvDecrementInstanceCount(var void*: DLLIMPORT) __ENVDECREMENTINSTANCECOUNT(VOID; 
                     _2: Pointer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvFactIndex(var void*: DLLIMPORT) __ENVFACTINDEX(VOID; 
                    _2: Pointer): LongInt cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvGetFactSlot(var void*: DLLIMPORT) __ENVGETFACTSLOT(VOID; 
                    _2: Pointer; 
                    _3: PChar; 
                    _4: Pointer): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

function __declspec(__EnvGetInstanceName(var void*: DLLIMPORT)* __ENVGETINSTANCENAME(VOID; 
                    _2: Pointer): Char cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{$ENDIF}

implementation

procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
procedure __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';
function __declspec; external 'CLIPSDLL.DLL';

end.
